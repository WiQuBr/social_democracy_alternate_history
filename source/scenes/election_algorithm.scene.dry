title: Election
on-arrival: |
    // Redistribution of Votes for banned parties
    var banned_parties = ['nsdap', 'kpd', 'dnvp'];

    var redistribution_rules = {
        nsdap: {
            get_rules: function(Q) {
                let base;

                if (!Q.dnvp_banned && !Q.dvp_banned) {
                    base = { dnvp: 0.5, dvp: 0.2, other: 0.3 };
                } else if (!Q.dvp_banned) {
                    base = { dvp: 0.5, zentrum: 0.2, other: 0.3 };
                } else {
                    base = { zentrum: 0.4, other: 0.6 };
                }

                if (Q.electoral_threshold >= 5) {
                    base.other *= 0.6;
                    base.spd = (base.spd || 0) + 0.2;
                    base.zentrum = (base.zentrum || 0) + 0.2;
                }

                let total = 0;
                for (let t in base) total += base[t];
                for (let t in base) base[t] /= total;

                return base;
            }
        },

        dnvp: {
            get_rules: function(Q) {
                let base;

                if (!Q.dvp_banned) {
                    base = { dvp: 0.4, zentrum: 0.4, other: 0.2 };
                } else {
                    base = { zentrum: 0.6, other: 0.4 };
                }

                if (Q.electoral_threshold >= 5) {
                    base.other *= 0.6;
                    base.zentrum += 0.2;
                    base.spd = (base.spd || 0) + 0.2;
                }

                let total = 0;
                for (let t in base) total += base[t];
                for (let t in base) base[t] /= total;

                return base;
            }
        },

        kpd: {
            get_rules: function(Q) {
                let base;

                if (Q.sapd_formed === 1) {
                    base = { sapd: 0.5, spd: 0.3, other: 0.2 };
                } else if (!Q.nsdap_banned) {
                    base = { spd: 0.6, other: 0.3 };
                } else {
                    base = { spd: 0.75, other: 0.15 };
                }

                if (Q.electoral_threshold >= 5) {
                    base.other *= 0.6;
                    base.spd += 0.1;
                    base.zentrum = (base.zentrum || 0) + 0.1;
                }

                let total = 0;
                for (let t in base) total += base[t];
                for (let t in base) base[t] /= total;

                return base;
            }
        }
    };

    // Apply redistribution for banned parties
    for (var banned of banned_parties) {
        if (Q[banned + '_banned']) {
            for (var c of Q.classes) {
                var original = Q[c + '_' + banned];
                if (!original || original == 0) continue;

                var rules = redistribution_rules[banned].get_rules(Q);

                for (var t in rules) {
                    if (!Q[c + '_' + t]) Q[c + '_' + t] = 0;
                    Q[c + '_' + t] += original * rules[t];
                }

                Q[c + '_' + banned] = 0;
            }
        }
    }

    // calculate normalized class voting amounts (0 to 100)
    for (var c of Q.classes) {
        var class_votes = 0;
        for (var party of Q.parties) {
            if (Q[c+'_'+party] < 0) {
                Q[c+'_'+party] = 0;
            }
            class_votes += Q[c+'_'+party];
        }
        for (var party of Q.parties) {
            Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
            Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
        }
    }

    // 1. calculate support for each of the parties
    var total_support = 0;
    for (var party of Q.parties) {
        var party_support = 0;
        for (var c of Q.classes) {
            if (Q.old_demographics) {
                party_support += Q[c]*Q[c+'_'+party];
            } else  {
                party_support += Q[c]*Q[c+'_'+party+'_normalized'];
            }
        }
        Q[party + '_support'] = party_support;
        total_support += party_support;
    }
    // 2. normalize support (fraction)
    // 3. Round to integers
    for (var party of Q.parties) {
        Q[party+'_normalized'] = Q[party + '_support']/total_support;
        Q[party+'_votes_dec'] = Math.round(Q[party+'_normalized']*1000)/10;
        if (Q.use_decimals) {
            Q[party+'_votes'] = Q[party+'_votes_dec'];
            Q[party + '_votes_disp'] = Q[party+'_votes'];
        } else {
            Q[party+'_votes'] = Math.round(Q[party+'_normalized']*100);
            Q[party + '_votes_disp'] = Q[party+'_votes_dec'].toFixed(1);
        }
    }
go-to: jumpScene

# note: this is a helpful utility to deal with elections and so on.